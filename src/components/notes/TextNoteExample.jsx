import { useState } from 'react';
import { useNotes } from '../../contexts/NotesContext';
import TextNote from './TextNote';

/**
 * Example component showing how to use TextNote in a real application
 * This demonstrates integration with the NotesContext for CRUD operations
 */
const TextNoteExample = ({ noteId, onClose }) => {
  const { notes, createNote, updateNote } = useNotes();
  const [note, setNote] = useState(() => {
    if (noteId) {
      return notes.find(n => n.id === noteId) || null;
    }
    // Create a new note structure for new notes
    return {
      id: null, // Will be generated by createNote
      type: 'text',
      title: '',
      content: { text: '' },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      userId: null, // Will be set by NotesContext
      syncStatus: 'pending'
    };
  });

  const handleSave = async (updatedNote) => {
    try {
      if (note.id) {
        // Update existing note
        const savedNote = await updateNote(note.id, {
          title: updatedNote.title,
          content: updatedNote.content
        });
        setNote(savedNote);
      } else {
        // Create new note
        const newNote = await createNote('text', updatedNote.content, updatedNote.title);
        setNote(newNote);
      }
    } catch (error) {
      console.error('Failed to save note:', error);
      // Error handling is managed by NotesContext
    }
  };

  const handleCancel = () => {
    onClose?.();
  };

  if (!note) {
    return (
      <div className="p-4 text-center text-gray-500">
        Note not found
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-gray-900">
            {note.id ? 'Edit Note' : 'Create New Note'}
          </h1>
          {onClose && (
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-xl font-bold"
            >
              Ã—
            </button>
          )}
        </div>

        <TextNote
          note={note}
          onSave={handleSave}
          onCancel={handleCancel}
          autoFocus={!note.id} // Auto-focus for new notes
          className="min-h-[400px]"
        />

        <div className="mt-6 flex items-center justify-between text-sm text-gray-500">
          <div>
            {note.id && (
              <>
                Created: {new Date(note.createdAt).toLocaleDateString()}
                {note.updatedAt !== note.createdAt && (
                  <span className="ml-4">
                    Updated: {new Date(note.updatedAt).toLocaleDateString()}
                  </span>
                )}
              </>
            )}
          </div>
          <div className="flex items-center space-x-2">
            <span className={`px-2 py-1 rounded text-xs ${
              note.syncStatus === 'synced' ? 'bg-green-100 text-green-800' :
              note.syncStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' :
              note.syncStatus === 'error' ? 'bg-red-100 text-red-800' :
              'bg-gray-100 text-gray-800'
            }`}>
              {note.syncStatus}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TextNoteExample;